swagger: '2.0'
info:
  description: CryS is a REST API for providing data about market activity for extisting cryptocurrencies and will offer insight into exactly which exchanges and markets contribute to pricing.
  title: CryS REST API
  version: v1
  
host: localhost:8080
schemes:
  - https
basePath: /api/

paths:
  /user/login:
    post:
      tags:
        - user
      summary: Login user with given credentials
      consumes:
      - multipart/form-data
      produces:
      - application/json
      parameters:
        - in: formData
          name: email
          type: string
          description: 'email to log in the user'
          required: true
          
        - in: formData
          name: password
          type: string
          description: 'password to log in the user'
          required: true
      responses:
        200:
          description: user logged in
          schema:
              $ref: '#/definitions/User'
        400:
          description: bad input parameter

  /user/register:
    post:
      tags:
        - user
      summary: Register user in the system
      consumes:
      - multipart/form-data
      produces:
      - application/json
      parameters:
        - in: formData
          name: firstName
          type: string
          description: 'first name of the user'
          required: true
          
        - in: formData
          name: lastName
          type: string
          description: 'last name of the user'
          required: true
        
        - in: formData
          name: telephone
          type: string
          description: 'phone number of the user'
          required: true
          
        - in: formData
          name: email
          type: string
          description: 'email to log in the user'
          required: true
          
        - in: formData
          name: password
          type: string
          description: 'password to log in the user'
          required: true
                  
        - in: formData
          name: emailNotifications
          type: boolean
          description: 'set if the system sends email notifications'
          required: true
          
      responses:
        201:
          description: user created
          schema:
              $ref: '#/definitions/User'
        400:
          description: bad input parameter
  
  /user/update:
    put:
      tags:
        - user
      summary: Update details for user account
      consumes:
      - multipart/form-data
      produces:
      - application/json
      parameters:
        - in: formData
          name: firstName
          type: string
          description: 'first name of the user'
          required: true
          
        - in: formData
          name: lastName
          type: string
          description: 'last name of the user'
          required: true
        
        - in: formData
          name: telephone
          type: string
          description: 'phone number of the user'
          required: true
          
        - in: formData
          name: email
          type: string
          description: 'email to log in the user'
          required: true
        
        - in: formData
          name: emailNotifications
          type: boolean
          description: 'set if the system sends email notifications'
          required: true
          
      responses:
        200:
          description: user details updated
          schema:
              $ref: '#/definitions/User'
        404:
          description: user with provided id does not exist
  
  /coin:
    get:
      tags:
        - coin
      summary: Get all coins from the system
      responses:
        200:
          description: coins returned to the client
          schema:
            type: array
            items:
              $ref: '#/definitions/Coin'
    
  /coin/{id}:
    get:
      tags:
        - coin
      summary: Retrieve details about a cryptocurrency
      produces:
      - application/json
      parameters:
        - in: path
          name: id
          type: string
          description: 'id of the coin'
          required: true
      responses:
        200:
          description: coins returned to the client
          schema:
              $ref: '#/definitions/Coin'
        400:
          description: bad input parameter
          
  /coins/{id}/history:
    get:
      tags:
        - coin
      summary: Retrieve details about history of cryptocurrency
      produces:
      - application/json
      parameters:
        - in: path
          name: id
          type: string
          description: 'id of the coin'
          required: true
      responses:
        200:
          description: history coin returned to the client
          schema:
            type: array
            items:
              $ref: '#/definitions/CoinHistory'
        400:
          description: bad input parameter
          
  /favorite/{userId}:
    get:
      tags:
        - favorite
      summary: Get favorites cryptocurrencies for an user
      produces:
      - application/json
      parameters:
        - in: path
          name: userId
          type: string
          description: 'user id for favorites coins'
          required: true
      responses:
        200:
          description: favorite coins returned to the client
          schema:
            type: array
            items:
              $ref: '#/definitions/Coin'
        400:
          description: bad input parameter
  
  /favorite/add:
    post:
      tags:
        - favorite
      summary: Add a cryptocurrency to favorites for an user
      consumes:
      - multipart/form-data
      produces:
      - application/json
      parameters:
        - in: formData
          name: userId
          type: string
          description: 'user id for favorites coins'
          required: true
        - in: formData
          name: coinId
          type: string
          description: 'coin id to add to favorites'
          required: true
      responses:
        201:
          description: resource has been created
  
  /favorite/remove:
    post:
      tags:
        - favorite
      summary: Remove a cryptocurrency from favorites for an user
      consumes:
      - multipart/form-data
      produces:
      - application/json
      parameters:
        - in: formData
          name: userId
          type: string
          description: 'user id for favorites coins'
          required: true
        - in: formData
          name: coinId
          type: string
          description: 'coin id to add to favorites'
          required: true
      responses:
        200:
          description: OK
        401:
          description: bad input parameter
   
  /alert/{userId}:
    get:
      tags:
        - alert
      summary: Get all alerts of the user
      produces:
      - application/json
      parameters:
        - in: path
          name: userId
          type: string
          description: 'user id for alerts'
          required: true
      responses:
        200:
          description: all alerts of the user have been retrieved
          schema:
            type: array
            items:
              $ref: '#/definitions/Alert'
              
  /alert/trigger/{userId}:
    get:
      tags:
        - alert
      summary: Get all alerts that should be triggered
      produces:
      - application/json
      parameters:
        - in: path
          name: userId
          type: string
          description: 'user id for alerts'
          required: true
      responses:
        200:
          description: all alerts of the user have been retrieved
          schema:
            type: array
            items:
              $ref: '#/definitions/Alert'

  /alert:
    post:
      tags:
        - alert
      summary: Create new alert
      consumes:
      - multipart/form-data
      produces:
      - application/json
      parameters:
        - in: formData
          name: userId
          type: string
          description: 'user id for alert'
          required: true
        - in: formData
          name: coinId
          type: string
          description: 'coin id for alert'
          required: true
        - in: formData
          name: value
          type: integer
          description: 'alert value'
          required: true
        - in: formData
          name: operator
          type: integer
          description: 'alert operator used to trigger alert'
          required: true
        
      responses:
        201:
          description: alert created
        400:
          description: bad input parameter
          
  /alert/remove/{id}:
    delete:
      tags:
        - alert
      summary: Remove an alert
      consumes:
      - multipart/form-data
      produces:
      - application/json
      parameters:
        - in: path
          name: id
          type: string
          description: 'alert id to remove from database'
          required: true
      responses:
        200:
          description: OK
        400:
          description: bad input parameter
  
definitions:
  User:
    type: object
    properties:
      id:
        type: string
        format: id
        example: 89755268-104f-11ea-8d71-362b9e155667
      firstName:
        type: string
        example: Daniel
      lastName:
        type: string
        example: Oana
      email:
        type: string
        example: daniel.oana26@gmail.com
      telephone:
        type: string
        example: 0756784385
      emailNotifications:
        type: boolean
        example: false
      token:
        type: string
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9eyJpc3MiOiJ0b3B0YWwuY29tIiwiZXhwIjoxNDI2NDIAwLCJodHRwOi8vdG9wdGFsLmNvbS9qd3RfY2xhaW1zL2lzX2FkbWluIjp0cnVlLCJjb21wYW55IjoiVG9wdGFsIiwiYXdlc29tZSI6dHJ1ZX0.yRQYnWzskCZUxPwaQupWkiUzKELZ49eM7oWxAQK_ZXw

  Coin:
    properties:
      id:
        type: string
        format: id
        example: bitcoin
      name:
        type: string
        example: Bitcoin
      rank:
        type: integer
        example: 1
      symbol:
        type: string
        example: "BTC"
      supply:
        type: integer
        example: 17193925.0000000000000000
      maxSupply:
        type: integer
        example: 21000000.0000000000000000
      marketCapUsd:
        type: integer
        example: 119179791817.6740161068269075
      volumeUsd24hr:
        type: integer
        example: 2928356777.6066665425687196
      priceUsd:
        type: integer
        example: 6931.5058555666618359
      changePercentage24hr:
        type: integer
        example: -0.8101417214350335
      vwap24hr:
        type: integer
        example: 7175.0663247679233209s
  
  CoinHistory:
    properties:
      id:
        type: string
        format: id
        example: 89755268-104f-11ea-8d71-362b9e155667
      coinId:
        type: string
        format: id
        example: bitcoin
      priceUsd:
        type: integer
        example: 7423.423472398
      timestamp:
        type: integer
        example: 1530489600000
      
  Alert:
    properties:
      id:
        type: string
        format: uuid
        example: 89755268-104f-11ea-8d71-362b9e155667
      userId:
        type: string
        format: uuid
        example: 89755268-104f-11ea-8d71-362b9e155667
      coinId:
        type: string
        format: uuid
        example: bitcoin
      value:
        type: integer
        example: 8000.0000
      operator:
        type: integer
        example: -1